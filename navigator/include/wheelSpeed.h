// Generated by gencpp from file frontiers_exploration/wheelSpeed.msg
// DO NOT EDIT!


#ifndef FRONTIERS_EXPLORATION_MESSAGE_WHEELSPEED_H
#define FRONTIERS_EXPLORATION_MESSAGE_WHEELSPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frontiers_exploration
{
template <class ContainerAllocator>
struct wheelSpeed_
{
  typedef wheelSpeed_<ContainerAllocator> Type;

  wheelSpeed_()
    : wheelSpeedLeft(0.0)
    , wheelSpeedRight(0.0)  {
    }
  wheelSpeed_(const ContainerAllocator& _alloc)
    : wheelSpeedLeft(0.0)
    , wheelSpeedRight(0.0)  {
  (void)_alloc;
    }



   typedef float _wheelSpeedLeft_type;
  _wheelSpeedLeft_type wheelSpeedLeft;

   typedef float _wheelSpeedRight_type;
  _wheelSpeedRight_type wheelSpeedRight;





  typedef boost::shared_ptr< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct wheelSpeed_

typedef ::frontiers_exploration::wheelSpeed_<std::allocator<void> > wheelSpeed;

typedef boost::shared_ptr< ::frontiers_exploration::wheelSpeed > wheelSpeedPtr;
typedef boost::shared_ptr< ::frontiers_exploration::wheelSpeed const> wheelSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frontiers_exploration::wheelSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::frontiers_exploration::wheelSpeed_<ContainerAllocator1> & lhs, const ::frontiers_exploration::wheelSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.wheelSpeedLeft == rhs.wheelSpeedLeft &&
    lhs.wheelSpeedRight == rhs.wheelSpeedRight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::frontiers_exploration::wheelSpeed_<ContainerAllocator1> & lhs, const ::frontiers_exploration::wheelSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace frontiers_exploration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b87cb13057a545dea68fe8b9d2d058e";
  }

  static const char* value(const ::frontiers_exploration::wheelSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b87cb13057a545dULL;
  static const uint64_t static_value2 = 0xea68fe8b9d2d058eULL;
};

template<class ContainerAllocator>
struct DataType< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frontiers_exploration/wheelSpeed";
  }

  static const char* value(const ::frontiers_exploration::wheelSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 wheelSpeedLeft\n"
"float32 wheelSpeedRight\n"
;
  }

  static const char* value(const ::frontiers_exploration::wheelSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheelSpeedLeft);
      stream.next(m.wheelSpeedRight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wheelSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frontiers_exploration::wheelSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frontiers_exploration::wheelSpeed_<ContainerAllocator>& v)
  {
    s << indent << "wheelSpeedLeft: ";
    Printer<float>::stream(s, indent + "  ", v.wheelSpeedLeft);
    s << indent << "wheelSpeedRight: ";
    Printer<float>::stream(s, indent + "  ", v.wheelSpeedRight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRONTIERS_EXPLORATION_MESSAGE_WHEELSPEED_H
