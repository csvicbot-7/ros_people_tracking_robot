<launch>

  <arg name="frame_id"           default="base_link"/>
  <arg name="rtabmapviz"         default="false"/>
  <arg name="scan_20_hz"         default="false"/>
  <arg name="voxel_size"         default="0.1"/> <!-- indoor: 0.1 to 0.3, outdoor: 0.3 to 0.5 -->
  <arg name="use_sim_time"       default="false"/>
  <arg name="database_path"      default="Aunav.db"/>
  <arg name="localization"       default="false"/>
  <arg name="publish_frame_id"   default="true"/>
  <arg name="tf_height"          default="0.70" /> <!-- 0.49 -->
  <arg name="pusblish_guess_id"  default="false" />
  <arg name="high_resolution"    default="true" />
  <arg name="wait_for_transform" default="0.2"/>
  <arg name="intensity_filter"   default="false" />
  <arg name="fp_Height"          default="3.0" />
  <arg name="fp_Length"          default="1.0" />
  <arg name="fp_Width"           default="0.75" />  
<!--
  <node type="RobotState" name="RobotState" pkg="robot_state" output="screen">
    <param name="m_lidarTfX"  value="0.35"/>
    <param name="m_lidarTfY"  value="-0.2"/>
    <param name="m_lidarTfZ"  value="1.15"/>
    <param name="m_tfYaw"  value="0"/>
    <param name="m_fpHeight"  value="$(arg fp_Height)"/>
    <param name="m_fpLength"  value="$(arg fp_Length)"/>
    <param name="m_fpWidth"  value="$(arg fp_Width)"/>
  </node>
-->
  <param if="$(arg use_sim_time)" name="use_sim_time" value="true"/>

  <node if="$(arg publish_frame_id)" pkg="tf" type="static_transform_publisher" name="created_base_to_os_sensor" args="-0.5 0  $(arg tf_height) 0 0 0 base_link os_sensor 200" />
  <!-- <node if="$(arg use_sim_time)" pkg="tf" type="static_transform_publisher" name="created_base_to_os_imu" args="0.25 -0.21 $(arg tf_height) 0 0 0 base_link os_imu 200" /> 
  <node if="$(arg publish_frame_id)" pkg="tf" type="static_transform_publisher" name="created_left_rear_to_base" args="0.3 -0.18 0 0 0 0 1 base_link base_corner1 200" />
  <node if="$(arg publish_frame_id)" pkg="tf" type="static_transform_publisher" name="created_left_front_to_base" args="-1.0 -0 18 0 0 0 0 1 base_link base_corner2 200" />
  <node if="$(arg publish_frame_id)" pkg="tf" type="static_transform_publisher" name="created_right_rear_to_base" args="-1.0 0.53 0 0 0 0 1 base_link base_corner3 200" />
  <node if="$(arg publish_frame_id)" pkg="tf" type="static_transform_publisher" name="created_right_front_to_base" args="0.3 0.53 0 0 0 0 1 base_link base_corner4 200" /> -->

  <!-- <node if="$(arg intensity_filter)" pkg="ouster_ros" type="os_cloud_node_filter" name="cloud_filter" /> -->

  <arg name="ouster_ns" default="os_cloud_node" doc="Override the default namespace of all ouster nodes"/>
  <arg name="sensor_hostname" default="192.168.32.35" doc="hostname or IP in dotted decimal form of the sensor"/>
  <arg name="udp_dest" default="192.168.32.32" doc="hostname or IP where the sensor will send data packets"/>
  <arg name="lidar_port" default="54163" doc="port to which the sensor should send lidar data"/>
  <arg name="imu_port" default="45413" doc="port to which the sensor should send imu data"/>
  <!-- <arg name="replay" default="false" doc="do not connect to a sensor; expect /os_node/{lidar,imu}_packets from replay"/> -->
  <arg name="lidar_mode" default="1024x10" doc="resolution and rate: either 512x10, 512x20, 1024x10, 1024x20, or 2048x10"/>
  <arg name="timestamp_mode" default="TIME_FROM_ROS_TIME" doc="method used to timestamp measurements: TIME_FROM_INTERNAL_OSC, TIME_FROM_SYNC_PULSE_IN, TIME_FROM_PTP_1588, TIME_FROM_ROS_TIME"/>
  <arg name="metadata" default="metadata.json" doc="override default metadata file for replays"/>
  <arg name="viz" default="false" doc="whether to run a simple visualizer"/>
  <arg name="rviz_config" default="$(find ouster_ros)/config/viz.rviz" doc="optional rviz config file"/>
  <!-- <arg name="image" default="false" doc="publish range/intensity/ambient image topic"/> -->
  <arg name="tf_prefix" default="" doc="namespace for tf transforms"/>

  <group ns="$(arg ouster_ns)">
    <node pkg="nodelet" type="nodelet" name="os_nodelet_mgr" output="screen" required="true"
      launch-prefix="bash -c 'sleep 2; $0 $@' "
      args="manager"/>
  </group>

  <group ns="$(arg ouster_ns)">
    <node pkg="nodelet" type="nodelet" name="os_node" output="screen" required="true"
      launch-prefix="bash -c 'sleep 3; $0 $@' "
      args="load nodelets_os/OusterSensor os_nodelet_mgr">
      <param name="~/sensor_hostname" type="str" value="$(arg sensor_hostname)"/>
      <param name="~/udp_dest" type="str" value="$(arg udp_dest)"/>
      <param name="~/lidar_port" type="int" value="$(arg lidar_port)"/>
      <param name="~/imu_port" type="int" value="$(arg imu_port)"/>
      <param name="~/lidar_mode" type="str" value="$(arg lidar_mode)"/>
      <param name="~/timestamp_mode" type="str" value="$(arg timestamp_mode)"/>
      <param name="~/metadata" type="str" value="$(arg metadata)"/>
    </node>
  </group>

  <group ns="$(arg ouster_ns)">
    <node pkg="nodelet" type="nodelet" name="os_cloud_node" output="screen" required="true"
      launch-prefix="bash -c 'sleep 4; $0 $@' "
      args="load nodelets_os/OusterCloud os_nodelet_mgr">
      <remap from="~/os_config" to="/os_node/os_config"/>
      <remap from="~/lidar_packets" to="/os_node/lidar_packets"/>
      <remap from="~/imu_packets" to="/os_node/imu_packets"/>
      <param name="~/tf_prefix" type="str" value="$(arg tf_prefix)"/>
      <param name="~/timestamp_mode" type="str" value="$(arg timestamp_mode)"/>
    </node>
  </group>

  <group ns="$(arg ouster_ns)">
    <node if="$(arg viz)" pkg="nodelet" type="nodelet" name="img_node" output="screen" required="true"
      launch-prefix="bash -c 'sleep 4; $0 $@' "
      args="load nodelets_os/OusterImage os_nodelet_mgr">
      <remap from="~/os_config" to="/os_node/os_config"/>
      <remap from="~/points" to="/os_cloud_node/points"/>      
    </node>
  </group>

  <node if="$(arg viz)" pkg="rviz" name="rviz" type="rviz" output="screen" required="false"
    launch-prefix="bash -c 'sleep 5; $0 $@' "
    args="-d $(arg rviz_config)"/>

  <!-- for compatibility with < 2.0 rosbags -->
  <node pkg="topic_tools" name="relay_lidar" type="relay" args="/os_node/lidar_packets /$(arg ouster_ns)/lidar_packets"/>
  <node pkg="topic_tools" name="relay_imu" type="relay" args="/os_node/imu_packets /$(arg ouster_ns)/imu_packets"/>


  <!-- IMU orientation estimation and publish tf accordingly to os_sensor frame -->
  <node pkg="nodelet" type="nodelet" name="imu_nodelet_manager" args="manager">
    <remap from="imu/data_raw" to="/os_cloud_node/imu"/>
    <remap from="imu/data" to="/os_cloud_node/imu/data"/>
    <param name="~/timestamp_mode" type="str" value="$(arg timestamp_mode)"/>   
  </node>
  <node pkg="nodelet" type="nodelet" name="imu_filter" args="load imu_filter_madgwick/ImuFilterNodelet imu_nodelet_manager">
    <param name="use_mag" value="false"/>
    <param name="world_frame" value="enu"/>
    <param name="publish_tf" value="false"/>
    <param name="constant_dt" value="0.01"/>
  </node>
  <node if="$(arg pusblish_guess_id)" pkg="nodelet" type="nodelet" name="imu_to_tf" args="load rtabmap_ros/imu_to_tf imu_nodelet_manager">
    <remap from="imu/data" to="/os_cloud_node/imu/data"/>
    <param name="fixed_frame_id" value="$(arg frame_id)_stabilized"/>
    <param name="base_frame_id" value="$(arg frame_id)"/>
  </node>

 <group ns="rtabmap">
    <node pkg="rtabmap_ros" type="icp_odometry" name="icp_odometry" output="screen">
      
      <param name="~/timestamp_mode" type="str" value="$(arg timestamp_mode)"/>   
      
      <param name="frame_id"      type="string" value="$(arg frame_id)"/>
      <param name="odom_frame_id" type="string" value="odom"/>

      <remap unless="$(arg intensity_filter)" from="scan_cloud" to="/os_cloud_node/points"/>
      <remap     if="$(arg intensity_filter)" from="scan_cloud" to="/os_cloud_node/points_filter"/>
      <remap from="imu" to="/os_cloud_node/imu/data"/>

      <param unless="$(arg scan_20_hz)" name="expected_update_rate" type="double" value="15"/>
      <param     if="$(arg scan_20_hz)" name="expected_update_rate" type="double" value="25"/>

      <param if="$(arg pusblish_guess_id)"      name="guess_frame_id" type="string" value="$(arg frame_id)_stabilized"/>
      <param name="wait_imu_to_init"            type="bool"   value="true"/>
      <param name="wait_for_transform"          type="bool"   value="true"/>
      <param name="wait_for_transform_duration" type="double" value="0.5"/>

      <!-- ICP parameters -->
      <!-- <param name="Icp/VoxelSize"                 type="string" value="$(arg voxel_size)"/> -->
      <param name="Icp/VoxelSize"                 type="string" value="0.2"/>   <!-- Uniform sampling voxel size (0=disabled). Default: 0.05 -->
      <param name="Icp/PointToPlaneK"             type="string" value="50"/>    <!-- Number of neighbors to compute normals for point to plane if the cloud doesn't have already normals. Default: 5.-->
      <param name="Icp/PointToPlaneRadius"        type="string" value="0"/>     <!-- Search radius to compute normals for point to plane if the cloud doesn't have already normals. Default: 0. -->
      <param name="Icp/PointToPlane"              type="string" value="true"/>  <!-- Use point to plane ICP. Default: true -->
      <param name="Icp/Iterations"                type="string" value="10"/>    <!-- Max iterations. Default: 30.-->
      <param name="Icp/Epsilon"                   type="string" value="0.001"/> <!-- Set the transformation epsilon (maximum allowable difference between two consecutive transformations) in order for an optimization to be considered as having converged to the final solution. Default: 0.-->
      <param name="Icp/MaxTranslation"            type="string" value="1.0"/>   <!-- Maximum ICP translation correction accepted (m). Default: 0.2 -->
      <param name="Icp/MaxRotation"               type="string" value="0.78"/>  <!-- Maximum ICP rotation correction accepted (rad). Default: 0.78 -->
      <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.2"/>   <!-- Max distance for point correspondences. Default: 0.1. -->
      <param name="Icp/PM"                        type="string" value="true"/>  <!-- Really exists? -->
      <param name="Icp/PMOutlierRatio"            type="string" value="0.5"/>   <!-- Outlier ratio used with Icp/Strategy>0. For libpointmatcher, this parameter set TrimmedDistOutlierFilter/ratio for convenience when configuration file is not set. For CCCoreLib, this parameter set the "finalOverlapRatio". The value should be between 0 and 1. Default: 0.85.-->
      <param name="Icp/CorrespondenceRatio"       type="string" value="0.01"/>  <!-- Ratio of matching correspondences to accept the transform. Default: 0.1. -->
      <param name="Icp/RangeMin"                  type="string" value="1.50"/>  <!-- Minimum range filtering (0=disabled). Default: 0. -->
      <param name="Icp/RangeMax"                  type="string" value="0.00"/>  <!-- Maximum range filtering (0=disabled). Default: 0. -->
      <param name="Icp/Strategy"                  type="string" value="1"/>     <!-- ICP implementation: 0=Point Cloud Library, 1=libpointmatcher, 2=CCCoreLib (CloudCompare). Default: 1. -->

      <param name="Odom/AlignWithGround"          type="string" value="false"/> <!-- Align odometry with the ground on initialization. Default: false. -->
      <param name="Odom/ScanKeyFrameThr"          type="string" value="0.6"/>   <!-- [Geometry] Create a new keyframe when the number of ICP inliers drops under this ratio of points in last frame's scan. Setting the value to 0 means that a keyframe is created for each processed frame. Default: 0.9.-->
      <param name="Odom/Strategy"                 type="string" value="0"/>     <!-- [0=Frame-to-Map (F2M) 1=Frame-to-Frame (F2F) 2=Fovis 3=viso2 4=DVO-SLAM 5=ORB_SLAM2 6=OKVIS 7=LOAM 8=MSCKF_VIO 9=VINS-Fusion 10=OpenVINS 11=FLOAM 12=Open3D]. Default: 0.-->
      <param name="Odom/FilteringStrategy"        type="string" value="1"/>     <!-- "0=No filtering 1=Kalman filtering 2=Particle filtering. This filter is used to smooth the odometry output." -->
      <param name="Odom/Holonomic"                type="string" value="false"/> <!-- "If the robot is holonomic (strafing commands can be issued). If not, y value will be estimated from x and yaw values (y=x*tan(yaw))." -->
      <param name="Odom/KalmanProcessNoise"       type="string" value="0.1"/>   <!-- Process measurement covariance value. Default: 0.01 -->
      <param name="Odom/KalmanMeasurementNoise"   type="string" value="0.01"/>  <!-- Process noise covariance value. Default: 0.001 -->
      <param name="OdomF2M/ScanSubtractRadius"    type="string" value="$(arg voxel_size)"/>
      <param name="OdomF2M/ScanMaxSize"           type="string" value="20000"/>

      <!-- <param name="Reg/Strategy"                   type="string" value="1"/> -->
    </node>

    <node pkg="rtabmap_ros" type="rtabmap" name="rtabmap" output="screen" args="-d">

      <param name="~/timestamp_mode" type="str" value="$(arg timestamp_mode)"/>   

      <param name="database_path" type="string" value="$(arg database_path)"/>
      <param if="$(arg pusblish_guess_id)" name="frame_id" type="string" value="$(arg frame_id)_stabilized"/>
      <param unless="$(arg pusblish_guess_id)" name="frame_id" type="string" value="$(arg frame_id)"/>

      <!-- <param name="frame_id"  type="string"  value="$(arg frame_id)"/> -->

      <param name="subscribe_depth"      type="bool" value="false"/>
      <param name="subscribe_rgb"        type="bool" value="false"/>
      <param name="subscribe_scan_cloud" type="bool" value="true"/>
      <param name="approx_sync"          type="bool" value="false"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="map_always_update"    type="bool" value="true"/>

      <param name="odom_tf_linear_variance"  value="0.001"/>
      <param name="odom_tf_angular_variance" value="0.001"/>

      <remap unless="$(arg intensity_filter)" from="scan_cloud" to="/os_cloud_node/points"/>
      <remap     if="$(arg intensity_filter)" from="scan_cloud" to="/os_cloud_node/points_filter"/>
      <remap from="imu" to="/os_cloud_node/imu/data"/>

      <!-- RTAB-Map's parameters -->
      <param name="Rtabmap/DetectionRate"       type="string" value="4.0"/>
      <!-- <param name="Rtabmap/TimeThr"             type="string" value="500"/> -->

      <param name="RGBD/NeighborLinkRefining"   type="string" value="true"/>
      <param name="RGBD/ProximityBySpace"       type="string" value="true"/>
      <param name="RGBD/ProximityMaxGraphDepth" type="string" value="0"/>
      <param name="RGBD/LocalRadius"            type="string" value="1000"/> <!-- Parameter used by the planner -->
      <param name="RGBD/AngularUpdate"          type="string" value="0.05"/>
      <param name="RGBD/LinearUpdate"           type="string" value="0.05"/>

      <param name="Reg/Strategy"                type="string" value="1"/>
      <param name="Optimizer/GravitySigma"      type="string" value="0.5"/>
      <param name="Optimizer/Strategy"          type="string" value="1"/>
      <param name="Optimizer/Iterations"        type="string" value="30"/>

      <param name="Grid/Sensor"                 type="string"   value="0"/> <!-- 0: laser scan, 1: depth image(s), 2: both, default: 1-->
      <param name="Grid/3D"                     type="bool"   value="true"/>
      <param name="Grid/RayTracing"             type="bool"   value="false"/>
      <param     if="$(arg high_resolution)" name="Grid/CellSize" type="string" value="0.1"/>
      <param unless="$(arg high_resolution)" name="Grid/CellSize" type="string" value="$(arg voxel_size)"/>
      <param name="Grid/ClusterRadius"          type="string" value="2.0"/>
      <param name="Grid/GroundIsObstacle"       type="string" value="false"/>

      <param name="Grid/MaxObstacleHeight"      type="string" value="2.0"/>
      <param name="Grid/MaxGroundAngle"         type="string" value="15"/>  <!-- 15 funciona con escalon y sin ruido --> 
      <param name="Grid/MinClusterSize"         type="string" value="20"/>  <!-- 20 funciona con escalon y sin rudio, 2022-09-22 Cambiado de 20 a 40-->
      <param name="Grid/NormalK"                type="string" value="27"/>  <!-- 25 funciona con escalon y sin rudio -->
      <param name="Grid/FlatObstacleDetected"   type="string" value="false"/>
      <param name="Grid/NormalsSegmentation"    type="string" value="true"/>

      <param name="Grid/NoiseFilteringMinNeighbors" type="string" value="15"/>  <!-- 10  funciona con escalon y sin rudio, 2022-09-22 Cambiado de 10 a 20, 2022-12-20 de 20 a 10 -->
      <param name="Grid/NoiseFilteringRadius"       type="string" value="0.5"/> <!-- 0.5 funciona con escalon y sin rudio -->

      <param name="Grid/UpdateError"            type="string" value="0.01"/>
      <param name="Grid/RangeMax"               type="string" value="8"/>
      <param name="Grid/RangeMin"               type="string" value="0.2"/>
      <!-- <param name="GridGlobal/Eroded"               type="bool" value="true"/> -->
      <param name="Grid/PreVoxelFiltering"      type="bool" value="true"/>

      <param name="Grid/FootprintHeight"        type="string" value="$(arg fp_Height)"/>
      <param name="Grid/FootprintLength"        type="string" value="$(arg fp_Length)"/>
      <param name="Grid/FootprintWidth"         type="string" value="$(arg fp_Width)"/>

      <!-- ICP parameters -->
      <param name="Icp/VoxelSize"                 type="string" value="$(arg voxel_size)"/>
      <param name="Icp/PointToPlaneK"             type="string" value="50"/>    <!-- Number of neighbors to compute normals for point to plane if the cloud doesn't have already normals. Default: 5.-->
      <param name="Icp/PointToPlaneRadius"        type="string" value="0"/>     <!-- Search radius to compute normals for point to plane if the cloud doesn't have already normals. Default: 0. -->
      <param name="Icp/PointToPlane"              type="string" value="true"/>  <!-- Use point to plane ICP. Default: true -->
      <param name="Icp/Iterations"                type="string" value="10"/>    <!-- Max iterations. Default: 30.-->
      <param name="Icp/Epsilon"                   type="string" value="0.001"/> <!-- Set the transformation epsilon (maximum allowable difference between two consecutive transformations) in order for an optimization to be considered as having converged to the final solution. Default: 0.-->
      <param name="Icp/MaxTranslation"            type="string" value="1.0"/>   <!-- Maximum ICP translation correction accepted (m). Default: 0.2 -->
      <param name="Icp/MaxRotation"               type="string" value="0.78"/>  <!-- Maximum ICP rotation correction accepted (rad). Default: 0.78 -->
      <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.2"/>   <!-- Max distance for point correspondences. Default: 0.1. -->
      <param name="Icp/PM"                        type="string" value="true"/> 
      <param name="Icp/PMOutlierRatio"            type="string" value="0.5"/>   <!-- Outlier ratio used with Icp/Strategy>0. For libpointmatcher, this parameter set TrimmedDistOutlierFilter/ratio for convenience when configuration file is not set. For CCCoreLib, this parameter set the "finalOverlapRatio". The value should be between 0 and 1. Default: 0.85.-->
      <param name="Icp/CorrespondenceRatio"       type="string" value="0.01"/>  <!-- Ratio of matching correspondences to accept the transform. Default: 0.1. -->
      <param name="Icp/RangeMin"                  type="string" value="1.50"/>  <!-- Minimum range filtering (0=disabled). Default: 0. -->
      <param name="Icp/RangeMax"                  type="string" value="0.00"/>  <!-- Maximum range filtering (0=disabled). Default: 0. -->
      <param name="Icp/Strategy"                  type="string" value="1"/>     <!-- ICP implementation: 0=Point Cloud Library, 1=libpointmatcher, 2=CCCoreLib (CloudCompare). Default: 1. -->

      <!-- localization mode -->
      <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="bool" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="bool" value="true"/>
      <param name="Mem/InitWMWithAllNodes" type="bool"   value="$(arg localization)"/>
      <param name="Mem/NotLinkedNodesKept" type="bool"   value="false"/>
      <param name="Mem/ReduceGraph"        type="bool"   value="false"/>
      <param name="Mem/STMSize"            type="string" value="50"/>
      <!-- param name="Mem/LaserScanVoxelSize" type="string" value="0.1"/ -->
      <!-- param name="Mem/LaserScanNormalK"   type="string" value="10"/ -->
      <!-- param name="Mem/LaserScanRadius"    type="string" value="0"/ -->

      <!-- When sending goals on /rtabmap/goal topic, use actionlib to communicate with move_base -->
      <param name="use_action_for_goal" type="bool" value="true"/>
      <remap from="move_base" to="/move_base"/>
      <remap from="goal" to="/move_base_simple/goal"/>

    </node>

  </group>

    <!-- <node pkg="people_follower" type="people_follower" name="people_follower" output="screen" respawn="false">
      <param name="model_file_name" type="string" value="$(find people_follower)/libsvm/pedestrian.model"/>
      <param name="range_file_name" type="string" value="$(find people_follower)/libsvm/pedestrian.range"/>
    </node> -->

    <node type="antiCrash" name="antiCrash" pkg="anticrash" output="screen">
    </node>

    <!-- <node type="exploration" name="exploration" pkg="frontiers_exploration" output="screen">
      <param name="radius_Exploration"        value = "1.0"/>
      <param name="radius_Valid_Pose"         value = "0.8"/>
      <param name="dist_Lim_2_Change_Orient"  value = "2.0"/>
    </node> -->
    
    <!-- <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <rosparam file="$(find navigator)/config/move_base_params.yaml" command="load" />

      <rosparam file="$(find navigator)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find navigator)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />

      <rosparam file="$(find navigator)/config/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find navigator)/config/global_costmap_params.yaml" command="load" />

      <rosparam file="$(find navigator)/config/dwa_local_planner_params.yaml" command="load" />
      <rosparam file="$(find navigator)/config/base_local_planner_params.yaml" command="load" />

      <rosparam file="$(find navigator)/config/global_planner_params.yaml" command="load" />
      <rosparam file="$(find navigator)/config/navfn_global_planner_params.yaml" command="load" />


      <remap from="cmd_vel" to="/aunav_velocity_controller/cmd_vel" />
      <remap from="map" to="/anticrash/processedGrid" />
      <remap from="odom" to="aunav_velocity_feedback/odom_filtered" />
    </node>

    <node type="wheelAdaptativeController" name="wheelAdaptativeController" pkg="navigator" output="screen">
    </node> -->

    <!-- <node type="navigationSlam" name="navigationSlam" pkg="navigation_slam" output="screen">
    </node> -->
  
</launch>
